@startuml

package app {
    class Main
    class StateHandler {
        +loop()
        +setState(AbstractState&)
    }
    interface AbstractState {
        {abstract}+AbstractState(StateHandler&)
        {abstract} +do()
        {abstract} +enter()
        {abstract} +leave()
    }
    package States {
        class SleepState
        class UpdateState
        class InitState
        class ErrorState

        UpdateState -u-|> AbstractState
        SleepState -u-|> AbstractState
        InitState -u-|> AbstractState
        ErrorState -u-|> AbstractState

    }

    Main -> StateHandler
    StateHandler --> AbstractState
}

package Service {
    class FileIO {
        +enble(bool)
    }
    class FatFS
    class ServiceInit {
      
    }
    class Display {
        +enable(bool)
    }
    class SDCard {
        +enable(bool)
    }
    class Debug
    class Sleep {
        +enter(enum Duration duration)
    }

}

package Hal {

    class Spi 
    class Uart {
        init(Baud,bits, parity, stopBit)

    }
    
    class HalInit
    class Power {
        +enable(Device, bool)
        +sleep()
    }
    class Led {
        +set(id, bool state)
    }

    class TickTimer {

    }


}

InitState --> ServiceInit
ServiceInit --> HalInit
UpdateState --> FileIO
UpdateState --> Display
SleepState --> Sleep
FileIO ->FatFS
FatFS --> SDCard
FileIO --> SDCard

Debug --> Uart
Debug --> Led
SDCard --> Spi
Display --> Spi
SDCard --> Power
Display --> Power
Sleep --> Power
FatFS --> TickTimer
@enduml