@startuml

package app {
    class Main
    class StateHandler {
        +loop()
        +setState(AbstractState&)
    }
    interface AbstractState {
        {abstract}+AbstractState(StateHandler&)
        {abstract} +enter()
        {abstract} +process()
        {abstract} +leave()
    }
    package States {
        class SleepState
        class UpdateState
        class InitState
        class ErrorState

        UpdateState -u-|> AbstractState
        SleepState -u-|> AbstractState
        InitState -u-|> AbstractState
        ErrorState -u-|> AbstractState

    }

    Main -> StateHandler
    StateHandler --> AbstractState
}

package Service {
    class FileIO {
        +enable(bool)
    }
    class FatFS
    class ServiceInit {
      
    }
    class Display {
        +init()
        +reset()
        +beginPaint()
        +endPaint()
        +sendBlock()
    }
    class SDCard {
        +enable(bool)
    }
    class Debug
    class Power {
        +enable(Device)
        +disable(Device)
        +halt()
    }

}

package Hal {

    class Spi 
    class Uart {
        init(Baud,bits, parity, stopBit)

    }
    
    class HalInit
    class Cpu {
        +enable(Device, bool)
        +sleep()
    }
    class Gpio {
        +init()
        +setPinXXX()
        +clrPinXXX()
        +getPinXXX()
    }

    class TickTimer {

    }
    
    class WakeUpTimer {

    }

}

InitState --> ServiceInit
ServiceInit --> HalInit
UpdateState --> FileIO
UpdateState --> Display
SleepState --> Power
FileIO ->FatFS
FatFS --> SDCard
FileIO --> SDCard

Debug --> Uart
Debug --> Gpio
SDCard --> Spi
Display --> Spi
Display --> Gpio
Power --> Cpu
Power --> WakeUpTimer
Power --> Gpio
FatFS --> TickTimer
@enduml